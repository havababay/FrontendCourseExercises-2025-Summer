import { Box, Button, TextField } from "@mui/material";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Student } from "./model/student";

export default function StudentForm() {
  const navigate = useNavigate();
  const [student, setStudent] = useState<Student>(new Student(0, "", "", ""));

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setStudent((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    // In a real app, you'd pass this data to a parent component
    // or a state management solution to add the new student.
    // The ID would likely be generated by a backend or a data layer.
    const newStudent = new Student(
      Date.now().toString(), // Placeholder ID
      student.firstName,
      student.lastName,
      student.email
    );

    const existingStudentsJSON = localStorage.getItem("students");
    const existingStudents = existingStudentsJSON
      ? JSON.parse(existingStudentsJSON)
      : [];
    const updatedStudents = [...existingStudents, newStudent];
    localStorage.setItem("students", JSON.stringify(updatedStudents));

    // Navigate back to the student list
    navigate("/students");
  };

  return (
    <>
      <h1>Student Form</h1>
      <p>Fill out the form below to add a new student.</p>
      <Box
        component="form"
        onSubmit={handleSubmit}
        sx={{
          "& .MuiTextField-root": { m: 1, width: "30ch" },
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
        }}
        noValidate
        autoComplete="off"
      >
        <TextField
          required
          name="firstName"
          label="First Name"
          value={student.firstName}
          onChange={handleChange}
        />
        <TextField
          required
          name="lastName"
          label="Last Name"
          value={student.lastName}
          onChange={handleChange}
        />
        <TextField
          required
          name="email"
          label="Email"
          type="email"
          value={student.email}
          onChange={handleChange}
        />
        <Button type="submit" variant="contained" sx={{ mt: 2 }}>
          Save Student
        </Button>
      </Box>
    </>
  );
}
