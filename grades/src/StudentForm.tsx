import { Box, Button, LinearProgress, TextField } from "@mui/material";
import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Student } from "./model/student";
import {
  addStudent,
  getStudent,
  updateStudent,
} from "./firestore/studentService";
import "./StudentForm.css";

export default function StudentForm() {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const { id } = useParams<{ id: string }>();
  const [student, setStudent] = useState<Student>(new Student("", "", "", ""));

  useEffect(() => {
    if (id) {
      setIsEditMode(true);
      setIsLoading(true);
      getStudent(id)
        .then((fetchedStudent) => {
          if (fetchedStudent) {
            setStudent(fetchedStudent);
          }
        })
        .catch((error) => {
          console.error("Error fetching student: ", error);
        })
        .finally(() => {
          setIsLoading(false);
        });
    } else {
      setIsEditMode(false);
      setStudent(new Student("", "", "", ""));
    }
  }, [id]);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setStudent((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    if (isEditMode) {
      // Update existing student logic can be added here
      // For now, we'll just log and navigate back
      updateStudent(student)
        .then(() => {
          navigate("/students");
        })
        .finally(() => {
          setIsLoading(false);
        });
    } else {
      // The ID will be generated by Firestore, so we can pass the student
      // object without an ID.
      addStudent(student)
        .then(() => {
          // Navigate back to the student list
          navigate("/students");
        })
        .finally(() => {
          setIsLoading(false);
        });
    }
  };

  return (
    <>
      <h1 className="title">Student Form</h1>
      <p>Fill out the form below to add a new student.</p>
      {isLoading ? (
        <LinearProgress sx={{ width: "30ch", mt: 4 }} />
      ) : (
        <Box
          component="form"
          onSubmit={handleSubmit}
          sx={{
            width: {
              sm: "90%", md: "40ch", lg: "30ch"
            },
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
          noValidate
          autoComplete="off"
        >
          <TextField
            required
            name="firstName"
            label="First Name"
            value={student.firstName}
            onChange={handleChange}
            fullWidth
          />
          <TextField
            required
            name="lastName"
            label="Last Name"
            value={student.lastName}
            onChange={handleChange}
            fullWidth
          />
          <TextField
            required
            name="email"
            label="Email"
            type="email"
            value={student.email}
            onChange={handleChange}
            fullWidth
          />
          <Button type="submit" variant="contained" sx={{ mt: 2 }}>
            Save Student
          </Button>
        </Box>
      )}
    </>
  );
}
